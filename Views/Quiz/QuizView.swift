import SwiftUI

struct QuizView: View {
    @EnvironmentObject private var gameManager: GameManager
    @Environment(\.dismiss) private var dismiss

    @StateObject private var manager = QuizManager()
    @State private var showGameOver = false

    var body: some View {
        ZStack {
            // –§–æ–Ω
            Color.backgroundColor
                .ignoresSafeArea()

            VStack(spacing: 20) {
                Text("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
                    .font(.largeTitle).bold()
                    .foregroundColor(.white)
                    .padding(.top, 40)

                // –°–µ—Ä–¥–µ—á–∫–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                HStack(spacing: 8) {
                    ForEach(0..<3, id: \.self) { idx in
                        Image(systemName: idx < manager.lives ? "heart.fill" : "heart")
                            .font(.title2)
                            .foregroundColor(.red)
                    }
                }

                // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–¥ —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
                Button("–ó–∞–∫—Ä—ã—Ç—å") {
                    dismiss()
                }
                .foregroundColor(.white)
                .padding(.bottom, 10)

                Spacer(minLength: 50)

                // –í–æ–ø—Ä–æ—Å
                Text(manager.currentQuestion.text)
                    .font(.title2)
                    .multilineTextAlignment(.center)
                    .foregroundColor(.white)
                    .padding(.horizontal)

                // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                VStack(spacing: 12) {
                    ForEach(manager.currentQuestion.answers.indices, id: \.self) { idx in
                        Button {
                            handleAnswer(idx)
                        } label: {
                            Text(manager.currentQuestion.answers[idx])
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(Color.accentColor)
                                .foregroundColor(.black)
                                .cornerRadius(10)
                        }
                    }
                }
                .padding(.horizontal)

                Spacer()
            }
        }
        // Sheet –¥–ª—è Game Over
        .sheet(isPresented: $showGameOver) {
            QuizGameOverView(
                onRetry: {
                    manager.reset()
                    showGameOver = false
                },
                onExit: {
                    dismiss()
                }
            )
        }
    }

    // MARK: ‚Äì –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
    private func handleAnswer(_ idx: Int) {
        let correct = manager.submit(answer: idx)
        if !correct {
            if manager.lives == 0 {
                showGameOver = true
            }
            return
        }
        if manager.currentQuestionIndex < manager.questions.count - 1 {
            manager.advance()
        } else {
            gameManager.complete(level: 1)
            dismiss()
        }
    }
}

// MARK: ‚Äì –≠–∫—Ä–∞–Ω ¬´–ü–æ—Ä–∞–∂–µ–Ω–∏–µ¬ª

struct QuizGameOverView: View {
    let onRetry: () -> Void
    let onExit: () -> Void

    var body: some View {
        ZStack {
            Color.backgroundColor
                .ignoresSafeArea()
            VStack(spacing: 30) {
                Text("üíî")
                    .font(.system(size: 80))
                Text("–ñ–∏–∑–Ω–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å")
                    .font(.title).bold()
                    .foregroundColor(.white)
                HStack(spacing: 20) {
                    Button("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", action: onRetry)
                        .padding()
                        .background(Color.accentColor)
                        .foregroundColor(.black)
                        .cornerRadius(10)

                    Button("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å", action: onExit)
                        .padding()
                        .background(Color.accentColor)
                        .foregroundColor(.black)
                        .cornerRadius(10)
                }
            }
            .padding()
        }
    }
}

#Preview {
    QuizView()
        .environmentObject(GameManager())
}
